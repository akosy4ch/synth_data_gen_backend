services:
  postgres:
    image: postgres:14
    restart: always
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data

  minio:
    image: minio/minio:latest
    restart: always
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      retries: 5
    volumes:
      - minio_data:/data  # bind to named volume or change to './minio_data:/data' if host bind-mount desired

  # backend:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     minio:
  #       condition: service_healthy
  #   ports:
  #     - "8000:8000"
  #  environment:
  #   - PYTHONPATH=/app
  #    - POSTGRES_HOST=postgres
  #   - POSTGRES_PORT=5432
  #    - POSTGRES_USER=${POSTGRES_USER}
  #   - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
  #    - POSTGRES_DB=${POSTGRES_DB}
  #   - S3_ENDPOINT=${S3_ENDPOINT}
  #    - S3_ACCESS_KEY=${S3_ACCESS_KEY}
  #    - S3_SECRET_KEY=${S3_SECRET_KEY}
  #    - S3_BUCKET=${S3_BUCKET}
  #  volumes:
  #   - ./src:/app/src  # adjust if needed

volumes:
  postgres_data:
  minio_data: