import os
import pandas as pd


def load_dataset(filepath, target_column=None):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ñ–∞–π–ª–∞ (CSV, TXT, XLSX, XLS, JSON) –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
    –∏ —á–∏—Ç–∞–µ—Ç –µ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–∏–º –º–µ—Ç–æ–¥–æ–º. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –¥—Ä—É–≥–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ, 
    –º–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –ª–æ–≥–∏–∫—É (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –∏ —Ç.–¥.).

    –ï—Å–ª–∏ target_column —É–∫–∞–∑–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ —ç—Ç—É –∫–æ–ª–æ–Ω–∫—É.
    –ü–æ –∏—Ç–æ–≥–∞–º –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç 'task': "text", "numeric" –∏–ª–∏ "mixed".
    """

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ (–ø—Ä–∏–º–µ—Ä: .csv, .xls, .json)
    ext = os.path.splitext(filepath)[1].lower()

    # 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
    if ext in [".csv", ".txt"]:
        # –î–ª—è csv/txt –ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ utf-8-sig, –µ—Å–ª–∏ –ª–æ–≤–∏–º UnicodeDecodeError ‚Äî
        # –ø—Ä–æ–±—É–µ–º cp1252, –∑–∞—Ç–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ cp1251. 
        # (–†–∞—Å—à–∏—Ä—è–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.)
        try:
            df = pd.read_csv(filepath, encoding="utf-8-sig", on_bad_lines="skip")
        except UnicodeDecodeError:
            try:
                df = pd.read_csv(filepath, encoding="cp1252", on_bad_lines="skip")
            except UnicodeDecodeError:
                df = pd.read_csv(filepath, encoding="cp1251", on_bad_lines="skip")

    elif ext in [".xlsx", ".xls"]:
        # –î–ª—è .xls –æ–±—ã—á–Ω–æ engine="xlrd", –¥–ª—è .xlsx ‚Äî "openpyxl".
        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º fallback. –ó–¥–µ—Å—å —Å–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:
        if ext == ".xls":
            df = pd.read_excel(filepath, engine="xlrd")
        else:
            df = pd.read_excel(filepath, engine="openpyxl")

    elif ext == ".json":
        # –ï—Å–ª–∏ JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON lines (–ø–æ —Å—Ç—Ä–æ–∫–∞–º), –Ω—É–∂–Ω–æ lines=True.
        # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π JSON-–º–∞—Å—Å–∏–≤, —É–±–∏—Ä–∞–µ–º lines=True.
        # –î–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ JSON lines.
        try:
            df = pd.read_json(filepath, encoding="utf-8-sig", lines=True)
        except ValueError:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –∑–Ω–∞—á–∏—Ç –æ–±—ã—á–Ω—ã–π JSON
            df = pd.read_json(filepath, encoding="utf-8-sig")

    else:
        raise ValueError(f"Unsupported file extension '{ext}'")
    
    # üîß –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–æ–Ω–æ–∫
    df.columns = df.columns.str.strip()

    # 2. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω target_column, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ
    if target_column:
        if target_column not in df.columns:
            raise ValueError(f"Column '{target_column}' not found in dataset")

        target_series = df[target_column]
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–ª–æ–Ω–∫–µ:
        if target_series.dtype == object:
            task = "text"
            df = df[[target_column]]
        elif pd.api.types.is_numeric_dtype(target_series):
            task = "numeric"
            df = df[[target_column]]
        else:
            # –ï—Å–ª–∏ –≤ —ç—Ç–æ–π –∫–æ–ª–æ–Ω–∫–µ –Ω–µ —á–∏—Å—Ç—ã–µ object/—á–∏—Å–ª–∞, –ø—É—Å—Ç—å –±—É–¥–µ—Ç 'mixed'
            task = "mixed"
            df = df[[target_column]]

    else:
        # –ï—Å–ª–∏ target_column –Ω–µ –∑–∞–¥–∞–Ω, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ –≤—Å–µ–º—É DataFrame
        numeric_count = df.select_dtypes(include=["number"]).shape[1]
        object_count = df.select_dtypes(include=["object"]).shape[1]
        total_count = df.shape[1]

        if numeric_count == total_count:
            task = "numeric"
        elif object_count == total_count:
            task = "text"
        else:
            task = "mixed"

    return df, task
